---
export interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  sizes?: string;
}

const { 
  src, 
  alt, 
  class: className = '', 
  width, 
  height, 
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'
} = Astro.props;

// Extract base name and extension
const pathParts = src.split('/');
const filename = pathParts[pathParts.length - 1];
const baseName = filename.split('.')[0];
const ext = filename.split('.').pop();

// Generate optimized image paths
const optimizedBase = `/images/optimized/${baseName}`;
const webpSrc = `${optimizedBase}.webp`;
const avifSrc = `${optimizedBase}.avif`;
const webpSmallSrc = `${optimizedBase}-small.webp`;
const avifSmallSrc = `${optimizedBase}-small.avif`;
const webpMediumSrc = `${optimizedBase}-medium.webp`;
const avifMediumSrc = `${optimizedBase}-medium.avif`;
const webpLargeSrc = `${optimizedBase}-large.webp`;
const avifLargeSrc = `${optimizedBase}-large.avif`;

// Fallback to original if optimized doesn't exist
const fallbackSrc = src;
---

<picture>
  <!-- AVIF format (best compression) -->
  <source 
    type="image/avif" 
    srcset={`${avifSmallSrc} 400w, ${avifMediumSrc} 800w, ${avifLargeSrc} 1200w, ${avifSrc} 1600w`}
    sizes={sizes}
  />
  
  <!-- WebP format (good compression, wide support) -->
  <source 
    type="image/webp" 
    srcset={`${webpSmallSrc} 400w, ${webpMediumSrc} 800w, ${webpLargeSrc} 1200w, ${webpSrc} 1600w`}
    sizes={sizes}
  />
  
  <!-- Fallback to original format -->
  <img 
    src={fallbackSrc}
    alt={alt}
    class={className}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
  />
</picture>